{"title":"C++栈","uid":"5ed8b908115516c8108f8f38b20c5876","slug":"C++栈","date":"2025-05-08T16:00:00.000Z","updated":"2025-05-27T11:35:58.000Z","comments":true,"path":"api/articles/C++栈.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/fv11znvo.png","content":"<p>这里讲 <strong>STL</strong> 中的栈。</p>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p><img src=\"https://oi-wiki.org/ds/images/stack.svg\"> </p>\n<h2 id=\"栈的常用函数（成员函数）\"><a href=\"#栈的常用函数（成员函数）\" class=\"headerlink\" title=\"栈的常用函数（成员函数）\"></a>栈的常用函数（成员函数）</h2><ul>\n<li><code>push(x)</code>:将元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 压入栈顶。</li>\n<li><code>pop()</code>:将栈顶元素弹出。</li>\n<li><code>top()</code>:返回栈顶元素。</li>\n<li><code>size()</code>:返回栈中元素的个数。</li>\n<li><code>empty()</code>:判断栈是否为空。</li>\n</ul>\n<p>注意：<strong>STL</strong> 中的栈常数有点大，而且在栈内没有元素时使用<code>pop()</code>函数或<code>top()</code>会<code>RE</code>，如果不嫌麻烦，可以用数组模拟。</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>请模拟一个栈。将有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6151em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 次操作，每次操作至少会给你一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">op</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span></span></span></span>。每输出一个数换一次行.<br>分为三种操作：  </p>\n<ol>\n<li>会在给你一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>，请将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> 压入栈顶。</li>\n<li>如果栈内是空的，请输出 <code>RE</code> 并不再操作，否则输出栈顶元素并弹出。</li>\n<li>输出元素个数。</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49\"># include</span><span style=\"color:#032F62\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">using</span><span style=\"color:#D73A49\"> namespace</span><span style=\"color:#6F42C1\"> std</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">int</span><span style=\"color:#24292E\"> t, op, x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">stack </span><span style=\"color:#D73A49\">&#x3C;int></span><span style=\"color:#24292E\"> st;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">int</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\tcin </span><span style=\"color:#D73A49\">>></span><span style=\"color:#24292E\"> t;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\twhile</span><span style=\"color:#24292E\">(t </span><span style=\"color:#D73A49\">--</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\tcin </span><span style=\"color:#D73A49\">>></span><span style=\"color:#24292E\"> op;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\tif</span><span style=\"color:#24292E\">(op </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tcin </span><span style=\"color:#D73A49\">>></span><span style=\"color:#24292E\"> x;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tst.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">(x);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\telse</span><span style=\"color:#D73A49\"> if</span><span style=\"color:#24292E\">(op </span><span style=\"color:#D73A49\">==</span><span style=\"color:#005CC5\"> 2</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\t\tif</span><span style=\"color:#24292E\">(st.</span><span style=\"color:#6F42C1\">empty</span><span style=\"color:#24292E\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\t\tcout </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#032F62\"> \"RE\"</span><span style=\"color:#D73A49\"> &#x3C;&#x3C;</span><span style=\"color:#032F62\"> \"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\t\t\treturn</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tcout </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#24292E\"> st.</span><span style=\"color:#6F42C1\">top</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#032F62\"> \"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tst.</span><span style=\"color:#6F42C1\">pop</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\telse</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tcout </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#24292E\"> st.</span><span style=\"color:#6F42C1\">size</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#032F62\"> \"</span><span style=\"color:#005CC5\">\\n</span><span style=\"color:#032F62\">\"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\treturn</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">&#125;</span></span></code></pre>\n\n<h2 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h2><p>单调栈是一种特殊的栈，它的元素是单调递增或单调递减的。</p>\n<p>单调栈的主要作用是在一个序列中找到每个元素左边或右边第一个比它小或大的元素。</p>\n<p>单调栈的实现方法是使用一个栈来存储元素，每次将一个元素入栈时，将栈中比它小的元素弹出，直到栈顶元素比它大或栈为空。</p>\n<p>单调栈的时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 是序列的长度。</p>\n<p>单调栈的应用非常广泛，例如在计算最大矩形面积、最大子矩阵和最大子数组和、离线 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>M</mi><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">RMQ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">RMQ</span></span></span></span> 等问题中，都可以使用单调栈来解决。</p>\n<p>单调栈的实现方法如下：</p>\n<ol>\n<li>创建一个空栈。</li>\n<li>遍历序列中的每个元素。</li>\n<li>如果栈为空或栈顶元素比当前元素小，则将当前元素入栈。</li>\n<li>如果栈顶元素比当前元素大，则将栈顶元素弹出。</li>\n<li>重复步骤 4，直到栈为空或栈顶元素比当前元素小。</li>\n<li>将当前元素入栈。</li>\n<li>重复步骤 3 到 6，直到序列中的所有元素都被遍历。</li>\n<li>输出。</li>\n</ol>\n<h2 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h2><pre class=\"shiki github-light\" style=\"background-color:#fff;color:#24292e\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49\"># include</span><span style=\"color:#032F62\"> &#x3C;bits/stdc++.h></span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">using</span><span style=\"color:#D73A49\"> namespace</span><span style=\"color:#6F42C1\"> std</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">int</span><span style=\"color:#24292E\"> n , a , ans;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">stack </span><span style=\"color:#D73A49\">&#x3C;int></span><span style=\"color:#24292E\"> st;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">int</span><span style=\"color:#6F42C1\"> main</span><span style=\"color:#24292E\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\tcin </span><span style=\"color:#D73A49\">>></span><span style=\"color:#24292E\"> n;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\tfor</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">int</span><span style=\"color:#24292E\"> i </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\"> ; i </span><span style=\"color:#D73A49\">&#x3C;=</span><span style=\"color:#24292E\"> n ; i </span><span style=\"color:#D73A49\">++</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\tcin </span><span style=\"color:#D73A49\">>></span><span style=\"color:#24292E\"> a[i];</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\t\twhile</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">!</span><span style=\"color:#24292E\">st.</span><span style=\"color:#6F42C1\">empty</span><span style=\"color:#24292E\">() </span><span style=\"color:#D73A49\">&#x26;&#x26;</span><span style=\"color:#24292E\"> a[i] </span><span style=\"color:#D73A49\">></span><span style=\"color:#24292E\"> a[st.</span><span style=\"color:#6F42C1\">top</span><span style=\"color:#24292E\">()])</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tans[st.</span><span style=\"color:#6F42C1\">top</span><span style=\"color:#24292E\">()] </span><span style=\"color:#D73A49\">=</span><span style=\"color:#24292E\"> i;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t\tst.</span><span style=\"color:#6F42C1\">pop</span><span style=\"color:#24292E\">();</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\tst.</span><span style=\"color:#6F42C1\">push</span><span style=\"color:#24292E\">(i);</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\tfor</span><span style=\"color:#24292E\">(</span><span style=\"color:#D73A49\">int</span><span style=\"color:#24292E\"> i </span><span style=\"color:#D73A49\">=</span><span style=\"color:#005CC5\"> 1</span><span style=\"color:#24292E\"> ; i </span><span style=\"color:#D73A49\">&#x3C;=</span><span style=\"color:#24292E\"> n ; i </span><span style=\"color:#D73A49\">++</span><span style=\"color:#24292E\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#123;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t\tcout </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#24292E\"> ans[i] </span><span style=\"color:#D73A49\">&#x3C;&#x3C;</span><span style=\"color:#032F62\"> \" \"</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">\t&#125;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49\">\treturn</span><span style=\"color:#005CC5\"> 0</span><span style=\"color:#24292E\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E\">&#125;</span></span></code></pre>\n\n<script src=\"https://giscus.app/client.js\"\n        data-repo=\"zhangyimin12345/zhangyimin12345.github.io\"\n        data-repo-id=\"R_kgDOOwy34Q\"\n        data-category=\"General\"\n        data-category-id=\"DIC_kwDOOwy34c4Cqo4M\"\n        data-mapping=\"pathname\"\n        data-strict=\"0\"\n        data-reactions-enabled=\"1\"\n        data-emit-metadata=\"0\"\n        data-input-position=\"top\"\n        data-theme=\"preferred_color_scheme\"\n        data-lang=\"zh-CN\"\n        crossorigin=\"anonymous\"\n        async>\n</script>\n","text":"这里讲 STL 中的栈。 图片 栈的常用函数（成员函数） push(x):将元素 xxx 压入栈顶。 pop():将栈顶元素弹出。 top():返回栈顶元素。 ...","permalink":"/post/C++栈","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":6,"path":"api/categories/C.json"}],"tags":[{"name":"OI","slug":"OI","count":7,"path":"api/tags/OI.json"},{"name":"STL","slug":"STL","count":2,"path":"api/tags/STL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%BE%E7%89%87\"><span class=\"toc-text\">图片</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%88%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%EF%BC%89\"><span class=\"toc-text\">栈的常用函数（成员函数）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E9%A2%98\"><span class=\"toc-text\">例题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%95%E8%B0%83%E6%A0%88\"><span class=\"toc-text\">单调栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81-1\"><span class=\"toc-text\">代码</span></a></li></ol>","author":{"name":"CodeNebula","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/dsfhfazq.png","link":"/","description":"Take a tour of 『CodeNebula』| 在『代码星云』里遨游。","socials":{"github":"https://github.com/zhangyimin12345","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Hexo主题安装","uid":"5326e1446e1cb298bfb0d2f63b3a53dc","slug":"Hexo主题安装","date":"2025-05-09T08:00:00.000Z","updated":"2025-05-27T11:35:18.000Z","comments":true,"path":"api/articles/Hexo主题安装.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/fv11znvo.png","text":"Hexo 自带的主题丑死了，可以使用其他的主题，这里推荐 Beautify 、 Fluid 、Aurora 和 Next。 因为未试过，所以只有 Fluid 和...","permalink":"/post/Hexo主题安装","photos":[],"count_time":{"symbolsCount":"41k","symbolsTime":"37 mins."},"categories":[{"name":"Hexo","slug":"Hexo","count":3,"path":"api/categories/Hexo.json"}],"tags":[{"name":"Hexo","slug":"Hexo","count":4,"path":"api/tags/Hexo.json"},{"name":"博客相关","slug":"博客相关","count":4,"path":"api/tags/博客相关.json"}],"author":{"name":"CodeNebula","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/dsfhfazq.png","link":"/","description":"Take a tour of 『CodeNebula』| 在『代码星云』里遨游。","socials":{"github":"https://github.com/zhangyimin12345","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"题解：P3371 【模板】单源最短路径（弱化版）","uid":"2576f649dc2536db9d92a414b582ade4","slug":"题解：P3371 【模板】单源最短路径（弱化版）","date":"2025-05-08T16:00:00.000Z","updated":"2025-05-27T11:34:58.000Z","comments":true,"path":"api/articles/题解：P3371 【模板】单源最短路径（弱化版）.json","keywords":null,"cover":"https://cdn.luogu.com.cn/upload/image_hosting/fv11znvo.png","text":"题目都说了可以用 SPFA 啊，秀啥 Dijkstra 啊！ 先介绍一下 SPFA 死了的算法。 SPFA 算法，全名 Shortest Path Faster...","permalink":"/post/题解：P3371 【模板】单源最短路径（弱化版）","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"题解","slug":"题解","count":1,"path":"api/categories/题解.json"}],"tags":[{"name":"OI","slug":"OI","count":7,"path":"api/tags/OI.json"},{"name":"最短路","slug":"最短路","count":1,"path":"api/tags/最短路.json"}],"author":{"name":"CodeNebula","slug":"blog-author","avatar":"https://cdn.luogu.com.cn/upload/image_hosting/dsfhfazq.png","link":"/","description":"Take a tour of 『CodeNebula』| 在『代码星云』里遨游。","socials":{"github":"https://github.com/zhangyimin12345","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}